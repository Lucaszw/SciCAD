#!/usr/bin/env electron
require('pkginfo')(module);
const Microdrop = require('../index.js');
const electron = require('electron');
const isDev = require('electron-is-dev');

// const PKG_NAME = module.exports.name;
const env = module.exports.environment;

if (!isDev) process.argv.splice(1, 0, '');

const Ports = (argv) => {
 return {
   http_port:     argv.httpPort,
   mqtt_ws_port:  argv.mqttWsPort,
   mqtt_tcp_port: argv.mqttTcpPort
 };
}

const argv = require('yargs')
  .default('http-port', env.HTTP_PORT)
  .default('mqtt-ws-port', env.MQTT_WS_PORT)
  .default('mqtt-tcp-port', env.MQTT_TCP_PORT)
  .command('dump', 'dump state to file', async (yargs) => {
    const ports = Ports(yargs.argv);
    console.log(await Microdrop.dump(electron, ports));
    process.exit();
  })
  .command('launch <file>', 'launch microdrop', () => {}, async (argv) => {
    Microdrop(electron, Ports(argv), argv.file);
  })
  .command('load-device <file>', 'load device file', () => {}, async (argv) => {
    await Microdrop.loadSvg(electron, Ports(argv), argv.file);
    process.exit();
  })
  .command('reset', 'Reset MicroDrop data', async (yargs) => {
    await Microdrop.reset(electron, Ports(yargs.argv));
    console.log("reset complete");
    process.exit();
  })
  .command('$0', 'the default command', () => {}, (argv) => {
    Microdrop(electron, Ports(argv));
  })
  .argv;
